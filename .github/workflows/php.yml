name: PHP Composer

on: [push, pull_request]

jobs:
    build:
        name: PHP ${{ matrix.php-versions }} Test on ${{ matrix.operating-system }}
        runs-on: ubuntu-20.04

        strategy:
            fail-fast: false
            matrix:
                operating-system: [ubuntu-latest]
                php-versions: ['7.4', '8.0']

#        services:
#            mysql:
#                image: mysql:5.7
#                env:
#                    MYSQL_ALLOW_EMPTY_PASSWORD: false
#                    MYSQL_ROOT_PASSWORD: chamilo
#                    MYSQL_DATABASE: chamilo
#                ports:
#                    - 3306/tcp
#                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Setup PHP, with composer and extensions
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-versions }}
                  tools: behat, symfony
                  extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, gd, json, soap, intl, zip, bcmath

            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Cache composer dependencies
              uses: actions/cache@v2
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  # Use composer.json for key, if composer.lock is not committed.
                  # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: Install dependencies with composer
              run: composer install --prefer-dist --no-progress

            - name: Install assets
              run: php bin/console assets:install

            - name: Generate fos_js_routes.json
              run: php bin/console fos:js-routing:dump --format=json --target=public/js/fos_js_routes.json

            - name: Get yarn cache directory
              id: yarn-cache
              run: echo "::set-output name=dir::$(yarn cache dir)"

            - name: Cache yarn dependencies
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache.outputs.dir }}
                  # Use composer.json for key, if composer.lock is not committed.
                  # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: ${{ runner.os }}-yarn-

            - name: Yarn install
              uses: borales/actions-yarn@v2.3.0
              with:
                  cmd: install # will run `yarn install` command

            - name: Yarn run encore dev
              uses: borales/actions-yarn@v2.3.0
              with:
                  cmd: run encore dev

            - name: Start chrome
              run: |
                sudo apt install google-chrome-stable
                google-chrome-stable --version
                google-chrome-stable --headless --disable-gpu --remote-debugging-port=9222 http://localhost &
                whereis google-chrome-stable

            # https://github.com/marketplace/actions/setup-chromedriver
            - name: Start chromedriver
#              uses: nanasess/setup-chromedriver@master
#              with:
#                  # Optional: do not specify to match Chrome's version
#                  chromedriver-version: '88.0.4324.96'

              run: |
                wget https://chromedriver.storage.googleapis.com/2.35/chromedriver_linux64.zip --quiet && unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin
                sudo chmod +x /usr/bin/chromedriver
                chromedriver --version

#            - run: |
#                export DISPLAY=:99
#                chromedriver --url-base=/wd/hub &
#                sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional
#                chromedriver --version

            - name: Set up JDK 1.8
              uses: actions/setup-java@v1
              with:
                java-version: 1.8

            - name: Get Selenium
              run: |
                wget http://selenium-release.storage.googleapis.com/3.141/selenium-server-standalone-3.141.59.jar --quiet

            - name: Run Selenium
              run: |
                java -version
                export DISPLAY=:99.0
                sudo xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
                java -jar selenium-server-standalone-3.141.59.jar -Dwebdriver.chrome.bin="/usr/bin/google-chrome-stable" -Dwebdriver.chrome.driver="/usr/bin/chromedriver"  > /dev/null &

            - name: Start mysql service
              run: sudo /etc/init.d/mysql start
#
            - name: Install database
              run: |
                  symfony console doctrine:database:create || echo "Error while creating the DB"
              env:
                DATABASE_URL: mysql://root:root@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/chamilo
                DATABASE_HOST: 127.0.0.1
                DATABASE_PORT: ${{ job.services.mysql.ports['3306'] }}
                DATABASE_NAME: chamilo
                DATABASE_USER: root
                DATABASE_PASSWORD: root
                APP_INSTALLED: 1

            - name: Apache
              run: |
                  sudo apt install apache2 libapache2-mod-php
                  sudo a2enmod rewrite actions
                  sudo cp -f tests/travis/gh-apache /etc/apache2/sites-available/000-default.conf
                  sudo chmod 777 -R $HOME
                  cat /etc/apache2/sites-available/000-default.conf

                  # Starting Apache
                  sudo service apache2 restart
                  sudo systemctl restart apache2

            - name: Install chamilo
              run: |
                  curl http://localhost/check.php
                  cd tests/behat
                  ../../vendor/behat/behat/bin/behat features/actionInstall.feature -vvv
                  cd ..
                  cd ..
                  sudo chmod -R 777 var public
                  php bin/console cache:clear
                  sudo chmod -R 777 var public

            - name: Composer analyse
              run: composer analyse

        # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
        # Docs: https://getcomposer.org/doc/articles/scripts.md

        # - name: Run test suite
        #   run: composer run-script test
