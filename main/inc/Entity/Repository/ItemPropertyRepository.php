<?php

namespace Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ItemPropertyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemPropertyRepository extends EntityRepository
{
    /**
     *
     * @param $tool
     * @param $itemId
     * @param \Entity\EntityCourse $course
     * @param int $sessionId
     * @param int $groupId
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getUsersSubscribedToItem($tool, $itemId, \Entity\EntityCourse $course, \Entity\EntitySession $session = null, \Entity\EntityGroup $group = null)
    {
        $criteria = array(
            'tool' => $tool,
            'lasteditType' => 'LearnpathSubscription',
            'ref' => $itemId,
            'course' => $course,
            'session' => $session,
            'group' => $group
        );
        return $this->findBy($criteria);


        $qb = $this->createQueryBuilder('i')
            ->select('i');

        $wherePart = $qb->expr()->andx();

        //Selecting courses for users
        $qb->innerJoin('i.user', 'u');

        $wherePart->add($qb->expr()->eq('i.tool', $qb->expr()->literal($tool)));
        $wherePart->add($qb->expr()->eq('i.lasteditType', $qb->expr()->literal('LearnpathSubscription')));
        $wherePart->add($qb->expr()->eq('i.ref', $itemId));
        $wherePart->add($qb->expr()->eq('i.cId', $course->getId()));
        $wherePart->add($qb->expr()->eq('i.idSession', $sessionId));
        $wherePart->add($qb->expr()->eq('i.toGroupId', $groupId));

        $qb->where($wherePart);
        $q = $qb->getQuery();
        //var_dump($q->getSQL());
        return $q->execute();
    }

    public function getGroupsSubscribedToItem($tool, $itemId, \Entity\EntityCourse $course, \Entity\EntitySession $session = null)
    {
        $criteria = array(
            'tool' => $tool,
            'lasteditType' => 'LearnpathSubscription',
            'ref' => $itemId,
            'course' => $course,
            'session' => $session,
            'toUserId' => null,
        );
        return $this->findBy($criteria);
    }

    public function SubscribedGroupsToItem($tool, \Entity\EntityCourse $course, \Entity\EntitySession $session = null, $itemId, $newList = array())
    {
        $em = $this->getEntityManager();
        $groupsSubscribedToItem = $this->getGroupsSubscribedToItem($tool, $itemId, $course, $session);

        $alreadyAdded = array();
        if ($groupsSubscribedToItem) {
            foreach ($groupsSubscribedToItem as $itemProperty) {
                $alreadyAdded[] = $itemProperty->getToGroupId();
            }
        }

        $toDelete = $alreadyAdded;

        if (!empty($newList)) {
            $toDelete = array_diff($alreadyAdded, $newList);
        }

        if ($toDelete) {
            foreach ($toDelete as $itemToDelete) {
                $item = $this->findOneBy(array(
                    'tool' => $tool,
                    'session' => $session,
                    'ref' => $itemId,
                    'toGroupId' => $itemToDelete
                ));
                if ($item) {
                    $em->remove($item);
                }
            }
        }

        foreach ($newList as $groupId) {
            $groupObj = $em->find('Entity\EntityCGroupInfo', $groupId);
            if (!in_array($groupId, $alreadyAdded)) {
                $item = new \Entity\EntityCItemProperty($course);
                $item->setGroup($groupObj);
                $item->setTool($tool);
                $item->setRef($itemId);
                $item->setIdSession($sessionId);
                $item->setLasteditType('LearnpathSubscription');
                $item->setVisibility('1');
                $em->persist($item); //$em is an instance of EntityManager
            }
        }
        $em->flush();
    }

    public function SubscribedUsersToItem($tool, \Entity\EntityCourse $course, \Entity\EntitySession $session = null, $itemId, $newUserList = array())
    {
        $em = $this->getEntityManager();
        $user = $em->getRepository('Entity\EntityUser');

        $usersSubscribedToItem = $this->getUsersSubscribedToItem($tool, $itemId, $course, $session);

        $alreadyAddedUsers = array();
        if ($usersSubscribedToItem) {
            foreach ($usersSubscribedToItem as $itemProperty) {
                $alreadyAddedUsers[] = $itemProperty->getToUserId();
            }
        }

        $usersToDelete = $alreadyAddedUsers;

        if (!empty($newUserList)) {
            $usersToDelete = array_diff($alreadyAddedUsers, $newUserList);
        }

        if ($usersToDelete) {
            foreach ($usersToDelete as $userToDelete) {
                $item = $this->findOneBy(array(
                    'tool' => $tool,
                    'session' => $session,
                    'ref' => $itemId,
                    'toUserId' => $userToDelete
                ));
                if ($item) {
                    $em->remove($item);
                }
            }
        }

        foreach ($newUserList as $userId) {
            if (!in_array($userId, $alreadyAddedUsers)) {
                $userObj = $user->find($userId);

                $item = new \Entity\EntityCItemProperty($course);
                $item->setUser($userObj);
                $item->setTool($tool);
                $item->setRef($itemId);
                if (!empty($session)) {
                    $item->setSession($session);
                }
                $item->setLasteditType('LearnpathSubscription');
                $item->setVisibility('1');
                $em->persist($item); //$em is an instance of EntityManager
            }
        }
        $em->flush();
    }
}