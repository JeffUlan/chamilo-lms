sonata_media:
    class:
        media: Chamilo\MediaBundle\Entity\Media
        gallery: Chamilo\MediaBundle\Entity\Gallery
        gallery_has_media: Chamilo\MediaBundle\Entity\GalleryHasMedia
        category: Chamilo\ClassificationBundle\Entity\Category
    db_driver: doctrine_orm
    default_context: default
    contexts:
        default:  # the default context is mandatory
            download:
                strategy: sonata.media.security.superadmin_strategy
                mode: http # X-Sendfile | http
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file
                - sonata.media.provider.vimeo
            formats:
                small: {width: 100, quality: 100}
                medium: {width: 300, quality: 100}
                big: {width: 970, quality: 100}
#        sonata_collection:
#            providers:
#                - sonata.media.provider.image
#            formats:
#                preview: {width: 100, quality: 100}
#                wide: {width: 820, quality: 100}
#        sonata_category:
#            providers:
#                - sonata.media.provider.image
#            formats:
#                preview: {width: 100, quality: 100}
#                wide: {width: 820, quality: 100}
#        user:
#            providers:
#                - sonata.media.provider.image
#            formats:
#                small: {width: 100, quality: 100}
#                big: {width: 970, quality: 100}
    cdn:
        # define the public base url for the uploaded media
        server:
            path: '%sonata_media.cdn.host%'
    filesystem:
        # define where the uploaded file will be stored
        local:
            directory: '%kernel.root_dir%/../var/upload/resource'
            create: true
    providers:
        file:
            # the resizer must be set to false, otherwhise this can delete icon files from the fs
            resizer: false
        image:
#            resizer: sonata.media.resizer.square
#            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
            thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        vimeo:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        youtube:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        dailymotion:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
#    pixlr:
#        enabled: true
#        referrer: App
    resizer:
        simple:
#            mode:  outbound
            mode: inset
