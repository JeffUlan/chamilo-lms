<?php
/* For licensing terms, see /license.txt */

namespace ChamiloLMS\Controller\Admin\Administrator;

use ChamiloLMS\Controller\CommonController;
use Silex\Application;
use Symfony\Component\Form\Extension\Validator\Constraints\FormValidator;
use Symfony\Component\HttpFoundation\Response;
use Entity;
use ChamiloLMS\Form\BranchType;

/**
 * Class RoleController
 * @todo @route and @method function don't work yet
 * @package ChamiloLMS\Controller
 * @author Julio Montoya <gugli100@gmail.com>
 */
class BranchController extends CommonController
{
    /**
     * @param \Silex\Application $app
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function indexAction()
    {
        $options = array(
            'decorate' => true,
            'rootOpen' => '<ul>',
            'rootClose' => '</ul>',
            'childOpen' => '<li>',
            'childClose' => '</li>',
            'nodeDecorator' => function($row) {
                $readLink = '<a href="'.$this->createUrl('read_link', array('id' => $row['id'])).'">'.$row['branchName'].'</a>';
                $editLink = '<a class="btn" href="'.$this->createUrl('update_link', array('id' => $row['id'])).'">Edit</a>';
                $deleteLink = '<a class="btn" href="'.$this->createUrl('delete_link', array('id' => $row['id'])).'"/>Delete</a>';
                return $readLink.' '.$editLink.' '.$deleteLink;
            }
            //'representationField' => 'slug',
            //'html' => true
        );

        // @todo put this in a function
        $repo = $this->getRepository();

        $query = $this->getManager()
            ->createQueryBuilder()
            ->select('node')
            ->from('Entity\BranchSync', 'node')
            //->where('node.cId = 0')
            ->orderBy('node.root, node.lft', 'ASC')
            ->getQuery();

        $htmlTree = $repo->buildTree($query->getArrayResult(), $options);
        $this->get('template')->assign('tree', $htmlTree);
        $this->get('template')->assign('links', $this->generateLinks());
        $response = $this->get('template')->render_template($this->getTemplatePath().'list.tpl');
        return new Response($response, 200, array());
    }

    public function readAction($id)
    {
        $template = $this->get('template');
        $template->assign('links', $this->generateLinks());
        $repo = $this->getRepository();
        $item = $this->getEntity($id);
        $children = $repo->children($item);
        $template->assign('item', $item);
        $template->assign('subitems', $children);
        $response = $template->render_template($this->getTemplatePath().'read.tpl');
        return new Response($response, 200, array());
    }

    public function addAction()
    {
        $this->app['extraJS'] = array(
            '<script src="'.api_get_path(WEB_LIBRARY_PATH).'javascript/tag/jquery.fcbkcomplete.js" type="text/javascript" language="javascript"></script>',
            '<link href="'.api_get_path(WEB_LIBRARY_PATH).'javascript/tag/style.css" rel="stylesheet" type="text/css" />'
        );

        return parent::addAction();
    }

    public function searchParentAction($keyword)
    {
        /** @var \EntityRepository $repo */
        $qb = $this->getManager()->createQueryBuilder();

        $qb->select(array('b'))
           ->from('Entity\BranchSync', 'b')
           ->where($qb->expr()->orX(
               $qb->expr()->like('u.branchName', '')
           ))
           ->orderBy('u.surname', 'ASC'))

        /** @var Entity\BranchSync $entity */
        // $entity = $repo->findOneByBranchName($keyword);
        $qb->expr()->like('u.branchName', '?2')
        $qb->getQuery()->setParameter(2, '%' . $value . '%');

        if ($entity) {
            echo $entity->getId();
        }

        return new Response(null, 200, array());
    }

    public function editAction($id)
    {
        return parent::editAction($id);
    }

    public function deleteAction($id)
    {
        return parent::deleteAction($id);
    }

    /**
     * Return an array with the string that are going to be generating by twig.
     * @todo could be autogenerated?
     * @return array
     */
    protected function generateLinks()
    {
        return array(
            'create_link' => 'admin_administrator_branches_add',
            'read_link' => 'admin_administrator_branches_read',
            'update_link' => 'admin_administrator_branches_edit',
            'delete_link' => 'admin_administrator_branches_delete',
            'list_link' => 'admin_administrator_branches'
        );
    }

    /**
    * {@inheritdoc}
    */
    protected function getTemplatePath()
    {
        return 'admin/administrator/branches/';
    }

    /**
     * {@inheritdoc}
     */
    protected function getRepository()
    {
        return $this->get('orm.em')->getRepository('Entity\BranchSync');
    }

    /**
     * {@inheritdoc}
     */
    protected function getNewEntity()
    {
        return new Entity\BranchSync();
    }

    /**
     * {@inheritdoc}
     */
    protected function getFormType()
    {
        return new BranchType();
    }
}
