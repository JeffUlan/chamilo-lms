<script>
    (function ($) {
        'use strict';

        var methods = {
            init: function(options) {
                var settings = $.extend({
                    'prototypePrefix': false,
                    'prototypeElementPrefix': '<hr />',
                    'containerSelector': false
                }, options);

                return this.each(function() {
                    show($(this), false);
                    $(this).change(function() {
                        show($(this), true);
                    });

                    function show(element, replace) {
                        var id = element.attr('id');
                        var selectedValue = element.val();
                        var prototypePrefix = id;
                        if (false != settings.prototypePrefix) {
                            prototypePrefix = settings.prototypePrefix;
                        }

                        var prototypeElement = $('#' + prototypePrefix + '_' + selectedValue);
                        var container;

                        if (settings.containerSelector) {
                            container = $(settings.containerSelector);
                        } else {
                            container = $(prototypeElement.data('container'));
                        }

                        if (!container.length) {
                            return;
                        }

                        if (!prototypeElement.length) {
                            container.empty();
                            return;
                        }

                        if (replace || !container.html().trim()) {
                            container.html(settings.prototypeElementPrefix + prototypeElement.data('prototype'));
                        }
                    }
                });
            }
        };

        $.fn.handlePrototypes = function(method) {
            if (methods[method]) {
                return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
            } else if (typeof method === 'object' || !method) {
                return methods.init.apply(this, arguments);
            } else {
                $.error( 'Method ' +  method + ' does not exist on jQuery.handlePrototypes' );
            }
        };
    })(jQuery);

    var $collectionHolder;

    // setup an "add a tag" link
    var $addTagLink = $('<a href="#" class="add_tag_link">Add a tag</a>');
    var $newLinkLi = $('<li></li>').append($addTagLink);

    jQuery(document).ready(function() {
        // Get the ul that holds the collection of tags
        $collectionHolder = $('ul.tags');

        // add the "add a tag" anchor and li to the tags ul
        $collectionHolder.append($newLinkLi);

        // count the current form inputs we have (e.g. 2), use that as the new
        // index when inserting a new item (e.g. 2)
        $collectionHolder.data('index', $collectionHolder.find(':input').length);

        $addTagLink.on('click', function(e) {
            // prevent the link from creating a "#" on the URL
            e.preventDefault();

            // add a new tag form (see next code block)
            addTagForm($collectionHolder, $newLinkLi);
        });
    });

    function addTagForm($collectionHolder, $newLinkLi) {
        // Get the data-prototype explained earlier
        var prototype = $collectionHolder.data('prototype');

        // get the new index
        var index = $collectionHolder.data('index');

        // Replace '__name__' in the prototype's HTML to
        // instead be a number based on how many items we have
        var newForm = prototype.replace(/__name__/g, index);

        // increase the index with one for the next item
        $collectionHolder.data('index', index + 1);

        // Display the form in the page in an li, before the "Add a tag" link li
        var $newFormLi = $('<li></li>').append(newForm);
        $newLinkLi.before($newFormLi);
    }

</script>

<div class="tab-pane" id="attributes">

    <ul class="tags" data-prototype="{{ form_widget(form.extraFields.vars.prototype)|e }}">
    </ul>

    {#<div id="sylius-assortment-product-attributes" class="collection-container" data-prototype="{{ ('<div id="sylius_product_attributes___name__">' ~ form_row(form.extraFields.vars.prototype.attribute, {'attr': {'class': 'attribute-chooser'}}))|e }}{{ (form_row(form.extraFields.vars.prototype.value) ~ '</div>')|e }}">#}

    {#{% for attributeForm in form.extraFields %}#}
        {#<div class="sylius-assortment-product-attributes-attribute row">#}
            {#<div class="col-md-10">#}
                {#{{ form_widget(attributeForm) }}#}
            {#</div>#}
            {#<div class="col-md-2">#}
                {#<a href="#" class="btn btn-danger" data-collection-button="delete" data-collection="sylius-assortment-product-attributes" data-collection-item="attribute">#}
                    {#<i class="glyphicon glyphicon-trash"></i>&nbsp;{{ 'sylius.product.remove_attribute'|trans }}#}
                {#</a>#}
            {#</div>#}
        {#</div>#}
        {#{% endfor %}#}
        {#{% for key, prototype in form.extraFields.vars.prototype.vars.prototypes %}#}
            {#<div id="attribute-prototype_{{ key }}" class="attribute-prototypes" data-prototype="{{ form_widget(prototype)|e }}"></div>#}
        {#{% endfor %}#}
    {#</div>#}

    <a href="#" class="btn btn-success btn-block" data-collection-button="add" data-prototype="sylius-assortment-product-attributes" data-collection="sylius-assortment-product-attributes">
        {{ 'sylius.product.add_attribute'|trans }}
    </a>
</div>
